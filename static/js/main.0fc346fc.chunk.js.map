{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","containers/App.js","components/ErrorBoundry.js","serviceWorker.js","index.js"],"names":["SearchBox","searchfield","searchChange","className","type","placeholder","onChange","Card","props","alt","src","id","name","email","cardList","robots","cardComponent","map","user","i","key","Scroll","style","overflow","border","height","children","App","Component","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","CardList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAeeA,EAbG,SAAC,GAAiC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC9B,OACI,yBAAKC,UAAU,OACX,2BACIA,UAAU,mCACVC,KAAK,SACLC,YAAY,gBACZC,SAAUJ,MCMXK,EAbF,SAACC,GACV,OACI,yBAAKL,UAAU,kDACX,yBAAKM,IAAI,cAAcC,IAAG,mCAA8BF,EAAMG,GAApC,cAC1B,6BACI,4BAAKH,EAAMI,MACX,2BAAIJ,EAAMK,UCMXC,EAXE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACTC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACpC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGR,GAAII,EAAOI,GAAGR,GAAIC,KAAMG,EAAOI,GAAGP,KAAMC,MAAOE,EAAOI,GAAGN,WAElF,OACI,6BACKG,ICCEK,EARA,SAACb,GACZ,OACI,yBAAKc,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEjB,EAAMkB,WCuCJC,GC1CYC,Y,wDDMvB,aAAe,IAAD,8BACV,gBAaJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAE9B,YAAa6B,EAAME,OAAOC,SAb1C,EAAKC,MAAQ,CACTnB,OAAQ,GACRd,YAAa,IAJP,E,iEAQQ,IAAD,OACjBkC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAAEhB,OAAQwB,S,+BAOjC,IAAD,OACCC,EAAiBC,KAAKP,MAAMnB,OAAO2B,QAAO,SAAA3B,GAC5C,OAAOA,EAAOH,KAAK+B,cAAcC,SAAS,EAAKV,MAAMjC,YAAY0C,kBAEvE,OACE,yBAAKxC,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWD,aAAcuC,KAAKZ,iBAC9B,kBAAC,EAAD,KACI,sCACI,kBAACgB,EAAD,CAAU9B,OAAQyB,W,GA7BpBZ,cEKEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACN,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0fc346fc.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst SearchBox = ({ searchfield, searchChange}) => {\r\n    return(\r\n        <div className='pa2'>\r\n            <input\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                placeholder='search robots'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Card = (props) => {\r\n    return(\r\n        <div className='bg-light-red dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robot_photo' src={`https://robohash.org/test${props.id}?200x200`} />\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst cardList = ({robots}) => {\r\n    const cardComponent = robots.map((user, i) => {\r\n        return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n    })\r\n    return(\r\n        <div>\r\n            {cardComponent}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default cardList;","import React from 'react'\r\n\r\nconst Scroll = (props) =>{\r\n    return (\r\n        <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport SearchBox from '../components/SearchBox'\r\nimport CardList from '../components/CardList'\r\nimport Scroll from '../components/Scroll'\r\nimport errorBoundry from '../components/ErrorBoundry'\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => this.setState({ robots: users}));\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value })\r\n    }\r\n\r\n    render() {\r\n        const filteredRobots = this.state.robots.filter(robots => {\r\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n        })\r\n      return (\r\n        <div className='tc'>\r\n            <h1 className='f1'>RoboFriends</h1>\r\n            <SearchBox searchChange={this.onSearchChange}/>\r\n            <Scroll>\r\n                <errorBoundry>\r\n                    <CardList robots={filteredRobots}/>\r\n                </errorBoundry>\r\n            </Scroll>\r\n        </div> \r\n    );\r\n    }\r\n}\r\n\r\nexport default App;","import React,{Component} from 'react'\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(porps) {\r\n        super();\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n\r\n        this.setState({ hasError: true })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError){\r\n            return <h1>Error: this element fale to render </h1>\r\n        }\r\n\r\n        return this.props.children\r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBoundry;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n   <React.StrictMode>\n    <App />\n   </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}